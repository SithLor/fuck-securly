/**
 * Created by Stan on 01/03/17.
 * Class responsible for configuration storage
 */
"use strict";
class Config {
  constructor(config) {
    this.items = config;
    this._defaultBlockMessage = "Your device is blocked";

    this.directoryDeviceId = null;
    this._pingCount = 0;
    this.isLoggedIn = false;

    this.announce = null;
    this.sessionId = null;
    this.studentId = null;
    this.studentName = null;
    this.canRaiseHand = false;
    this.isHandRaised = false;
    this.tabListenersAdded = false;
    this.chatMessages = [];
    this.hasUnreadChatMessages = false;
    this.forceOpenChat = false;
    this.canStartChat = false;
    this.playChatAlert = false;
    this.closeTabsTimeout = null;
    this.lockedToCourseWorkResources = false;
    this.canvasAssignmentIds = [];
    this.maxOpenTabs = 0;
    this.activeTab = null;

    this.userEmail = null;
    this.teacherId = null;
    this.teacherName = null;

    this.conferenceUrl = null;
    this.conferenceTabId = null;

    this.blockWindowId = 0;
    this.maximizeFocusedWindow = false;

    this.loginErrorReason = null;

    this.shareScreenHandler = null;
    this.capturedScreen = null;

    if (!config[STORAGE_SERVER_URL]) {
      this.items[STORAGE_SERVER_URL] = SERVER;
    }
    if (!config[STORAGE_SCREEN_BLOCK_MESSAGE]) {
      this.items[STORAGE_SCREEN_BLOCK_MESSAGE] = this._defaultBlockMessage;
    }
    if (!config[STORAGE_BLOCKED_MODE_TYPE]) {
      this.items[STORAGE_BLOCKED_MODE_TYPE] = IS_KIOSK ? PARAM_MODE_BLOCK : PARAM_MODE_NONE;
    }
    if (!config[STORAGE_NOTIFICATION_INTERVAL]) {
      this.items[STORAGE_NOTIFICATION_INTERVAL] = 0;
    }
    if (!config[STORAGE_IS_SCREEN_CAPTURE_ALLOWED]) {
      this.items[STORAGE_IS_SCREEN_CAPTURE_ALLOWED] = false;
    }
    if (!config[STORAGE_IS_CONTACT_ADMIN_ALLOWED]) {
      this.items[STORAGE_IS_CONTACT_ADMIN_ALLOWED] = false;
    }
    if (!config[STORAGE_CHROMEBOOK]) {
      this.items[STORAGE_CHROMEBOOK] = false;
    }
    if (!config[STORAGE_UPDATE_CHECK_DATE]) {
      this.items[STORAGE_UPDATE_CHECK_DATE] = new Date("01 Jan 1970 00:00:00 GMT").getTime();
    }
  }

  get serverUrl() {
    return this.items[STORAGE_SERVER_URL];
  }

  saveServerUrl(serverUrl) {
    return this.store(STORAGE_SERVER_URL, serverUrl)
  }

  get blocklist() {
    return this.items[STORAGE_BLOCKLIST];
  }

  saveBlocklist(blocklist) {
    return this.store(STORAGE_BLOCKLIST, blocklist).then(() => this.store(STORAGE_WHITELIST, null));
  }

  get customBlocklist() {
    return this.items[STORAGE_CUSTOM_BLOCKLIST];
  }

  get customBlocklistName() {
    return this.items[STORAGE_CUSTOM_BLOCKLIST_NAME];
  }

  saveCustomBlocklist(customBlocklist, customBlocklistName) {
    return this.store(STORAGE_CUSTOM_BLOCKLIST, customBlocklist)
        .then(() => this.store(STORAGE_CUSTOM_BLOCKLIST_NAME, customBlocklistName));
  }

  get blockedModeType() {
    return this.items[STORAGE_BLOCKED_MODE_TYPE];
  }

  saveBlockedModeType(modeType) {
    return this.store(STORAGE_BLOCKED_MODE_TYPE, modeType)
  }

  get blockedText() {
    return (this.items[STORAGE_SCREEN_BLOCK_MESSAGE]) ? this.items[STORAGE_SCREEN_BLOCK_MESSAGE] : this._defaultBlockMessage;
  }

  get deviceName() {
    return this.items[STORAGE_DEVICE_NAME];
  }

  saveDeviceName(deviceName) {
    return this.store(STORAGE_DEVICE_NAME, deviceName)
  }

  get deviceUdid() {
    return this.items[STORAGE_UDID];
  }

  saveDeviceUdid(deviceUdid) {
    return this.store(STORAGE_UDID, deviceUdid)
  }

  get isChromeBook() {
    return this.items[STORAGE_CHROMEBOOK];
  }

  saveIsChromeBook(isChromeBook) {
    return this.store(STORAGE_CHROMEBOOK, isChromeBook);
  }

  get isChatActive() {
    return this.chatMessages.length > 0;
  }

  get isClassSessionActive() {
    return this.sessionId != null
  }

  get isContactAdminAllowed() {
    return this.items[STORAGE_IS_CONTACT_ADMIN_ALLOWED];
  }

  get isScreenLocked() {
    return this.items[STORAGE_BLOCKED_MODE_TYPE] === PARAM_MODE_BLOCK;
  }

  get isScreenCaptureAllowed() {
    return this.items[STORAGE_IS_SCREEN_CAPTURE_ALLOWED];
  }

  get isSiteLocked() {
    return !!this.items[STORAGE_WHITELIST]
  }

  get notificationInterval() {
    return this.items[STORAGE_NOTIFICATION_INTERVAL];
  }

  get orgName() {
    return this.items[STORAGE_ORG_NAME];
  }

  get pingCount() {
    return this._pingCount++;
  }

  get updateCheckDate() {
    return new Date(parseInt(this.items[STORAGE_UPDATE_CHECK_DATE]));
  }

  async saveUpdateCheckDate(date) {
    return this.store(STORAGE_UPDATE_CHECK_DATE, date.getTime());
  }

  get whitelist() {
    return this.items[STORAGE_WHITELIST];
  }
  async saveWhitelist(whitelist) {
    return this.store(STORAGE_WHITELIST, whitelist);
  }
  async clearWhitelist() {
    this.lockedToCourseWorkResources = false;
    return this.store(STORAGE_WHITELIST, null)
  }

  async saveBlockedInfo(blockedMessage, modeType, notificationInterval, allowCaptureScreen, allowContactAdmin) {
    let savedItems = {};

    if (blockedMessage) {
      savedItems[STORAGE_SCREEN_BLOCK_MESSAGE] = blockedMessage;
      this.items[STORAGE_SCREEN_BLOCK_MESSAGE] = blockedMessage;
    } else {
      savedItems[STORAGE_SCREEN_BLOCK_MESSAGE] = this._defaultBlockMessage;
      this.items[STORAGE_SCREEN_BLOCK_MESSAGE] = this._defaultBlockMessage;
    }

    if (modeType) {
      savedItems[STORAGE_BLOCKED_MODE_TYPE] = modeType;
      this.items[STORAGE_BLOCKED_MODE_TYPE] = modeType;
    }
    let diagString = "Stored screen block modeType: " + modeType + ", message: " + blockedMessage;

    if (typeof allowCaptureScreen !== "undefined") {
      savedItems[STORAGE_IS_SCREEN_CAPTURE_ALLOWED] = allowCaptureScreen;
      this.items[STORAGE_IS_SCREEN_CAPTURE_ALLOWED] = allowCaptureScreen;
      diagString += ", capture screen: " + allowCaptureScreen;
    }
    if (typeof allowContactAdmin !== "undefined") {
      savedItems[STORAGE_IS_CONTACT_ADMIN_ALLOWED] = allowContactAdmin;
      this.items[STORAGE_IS_CONTACT_ADMIN_ALLOWED] = allowContactAdmin;
      diagString += ", allow contact admin: " + allowContactAdmin;
    }
    diagString += ", notification interval: ";
    if (typeof allowCaptureScreen !== "undefined" && notificationInterval !== LOC_PARAM_DONT_CHANGE) {
      savedItems[STORAGE_NOTIFICATION_INTERVAL] = notificationInterval;
      this.items[STORAGE_NOTIFICATION_INTERVAL] = notificationInterval;
      diagString += notificationInterval;
    }
    console.log(diagString);
    return this.bulkStore(savedItems);
  }

  async saveDeviceInfo(orgName, deviceName, lostModeType, lostModeMessage, notificationInterval, allowContactAdmin,
                 allowScreenCapture) {
    let savedItems = {};
    savedItems[STORAGE_ORG_NAME] = orgName;
    this.items[STORAGE_ORG_NAME] = orgName;
    savedItems[STORAGE_DEVICE_NAME] = deviceName;
    this.items[STORAGE_DEVICE_NAME] = deviceName;
    savedItems[STORAGE_BLOCKED_MODE_TYPE] = lostModeType;
    this.items[STORAGE_BLOCKED_MODE_TYPE] = lostModeType;
    savedItems[STORAGE_SCREEN_BLOCK_MESSAGE] = lostModeMessage;
    this.items[STORAGE_SCREEN_BLOCK_MESSAGE] = lostModeMessage;
    savedItems[STORAGE_NOTIFICATION_INTERVAL] = notificationInterval;
    this.items[STORAGE_NOTIFICATION_INTERVAL] = notificationInterval;
    savedItems[STORAGE_IS_CONTACT_ADMIN_ALLOWED] = allowContactAdmin;
    this.items[STORAGE_IS_CONTACT_ADMIN_ALLOWED] = allowContactAdmin;
    savedItems[STORAGE_IS_SCREEN_CAPTURE_ALLOWED] = allowScreenCapture;
    this.items[STORAGE_IS_SCREEN_CAPTURE_ALLOWED] = allowScreenCapture;
    return this.bulkStore(savedItems)
  }

  store(key, value) {
    if (value) {
      this.items[key] = value;
      return new Promise(resolve => {
        chrome.storage.local.set({[key]: value}, function () {
          if (chrome.runtime.lastError) {
            console.log("Failed to save object " + JSON.stringify(value) + " for key '" + key +
                "'. Error is: " + chrome.runtime.lastError.message);
          } else {
            console.log("Stored " + JSON.stringify(value) + " for key: " + key);
          }
          resolve();
        })
      })
    } else {
      delete this.items[key];
      return new Promise(resolve => {
        chrome.storage.local.remove([key], function () {
          if (chrome.runtime.lastError) {
            console.log("Failed to remove key '" + key + "'. Error is: " + chrome.runtime.lastError.message);
          } else {
            console.log("Key '" + key + "' removed");
          }
          resolve();
        })
      })
    }
  }

  bulkStore(object) {
    return new Promise(resolve => {
      chrome.storage.local.set(object, function () {
        if (chrome.runtime.lastError) {
          console.log("Failed to bulk save '" + JSON.stringify(object) + "'. Error is: " + chrome.runtime.lastError.message);
        } else {
          console.log("Items " + JSON.stringify(object) + " saved");
        }
        resolve();
      })
    })
  }

  bulkDelete(keys) {
    return new Promise(resolve => {
      chrome.storage.local.remove(keys, function () {
        if (chrome.runtime.lastError) {
          console.log("Failed to remove keys " + keys + " Error is: " + chrome.runtime.lastError.message);
        } else {
          console.log("Keys " + keys + " removed");
        }
        resolve();
      })
    })
  }
}